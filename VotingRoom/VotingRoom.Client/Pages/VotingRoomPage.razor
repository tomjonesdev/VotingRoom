@page "/{RoomId:guid}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using VotingRoom.Client.Components
@using VotingRoom.Client.Services
@using VotingRoom.Common.Enums
@using VotingRoom.Common.Models
@inject IVotingService VotingService
@inject ClientStateProvider ClientState
@implements IAsyncDisposable

<PageTitle>Voting Room</PageTitle>

<h1>@ClientState.Room?.Name</h1>

@if (ClientState.CurrentUser is null)
{
    <MemberJoinForm RoomId="RoomId" />
}
else if (ClientState.Room is not null)
{
    <RoomHeading Voter="ClientState.CurrentUser" Room="ClientState.Room" />
    <VoteCards />
}

@code {
    [Parameter] public Guid RoomId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await VotingService.Connect();

        // TODO: Retrieve room name for subsequent users when they connect (i.e prior to submitting their name)
        VotingService.OnUserJoined += HandleUserJoined;
        VotingService.OnUpdateCurrentUser += HandleUpdateCurrentUser;
    }

    private void HandleUserJoined(Voter newUser)
    {
        InvokeAsync(() =>
        {
            ClientState.Room.Voters.Add(newUser);
            StateHasChanged();
        });
    }

    private void HandleUpdateCurrentUser(
        Room room,
        Voter updatedUser)
    {
        ClientState.Room = room;
        ClientState.CurrentUser = updatedUser;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnUserJoined -= HandleUserJoined;
        VotingService.OnUpdateCurrentUser -= HandleUpdateCurrentUser;
    }
}
