@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using VotingRoom.Common.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Vote</PageTitle>

@if (voter.Id == 0)
{
    <form @onsubmit="AddVoter">
        <input type="text" @bind-value="voter.Name" placeholder="Your name" />
        <button class="btn btn-success">Join</button>
    </form>
}
else
{
    <div>
        <h2>Participants</h2>
        <ul>
            @foreach (var voter in voters)
            {
                <li>@voter.Name</li>
            }
        </ul>
    </div>

    <div class="card-group">
        @foreach (var item in voteItems)
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <button class="btn btn-success" @onclick="() => CastVote(item.Id)" disabled="@(!IsConnected && remainingVotes == 0)">@item.Name</button> @* Disabled condition isn't working for remainingVotes *@
                </div>
                <p>Total votes: @item.Votes</p>
                <ul class="list-group list-group-flush">
                    @foreach (var voter in item.Voters)
                    {
                        <li class="list-group-item">@voter.Name</li>
                    }
                </ul>
            </div>
        }
    </div>
}

@code {
    HubConnection? hubConnection;
    List<VoteItem> voteItems =
    [
    new() { Id = 1, Name = "1" },
    new() { Id = 2, Name = "2" },
    new() { Id = 3, Name = "3" },
    new() { Id = 4, Name = "5" },
    new() { Id = 5, Name = "8" },
    new() { Id = 6, Name = "13" },
    new() { Id = 7, Name = "21" },
    ];

    Voter voter = new();
    List<Voter> voters = [];
    int remainingVotes = 1;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/votehub"))
            .Build();

        hubConnection.On<int, string, int>("ReceiveVote", (voterId, voterName, voteItemId) =>
        {
            var voteItem = voteItems.First(vi => vi.Id == voteItemId);
            voteItem.Voters.Add(new() { Id = voterId, Name = voterName });

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Voter>("VoterJoin", (voter) =>
        {
            voters.Add(new() { Id = voter.Id, Name = voter.Name });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    async Task AddVoter()
    {
        voter.Id = voters.Count + 1;
        await hubConnection.SendAsync("VoterJoin", voter);
    }

    async Task CastVote(int voteItemId)
    {
        if (hubConnection is not null && remainingVotes > 0)
        {
            await hubConnection.SendAsync("Vote", voter, voteItemId);
            remainingVotes--;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}