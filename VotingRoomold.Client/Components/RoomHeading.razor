@using VotingRoom.Client.Services
@using VotingRoom.Common.Enums
@using VotingRoom.Common.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IVotingService VotingService
@inject ClientStateProvider ClientState
@implements IAsyncDisposable

<div class="room-description">
    <div>
        <h2>Story point voting</h2>
        <p>Simple story point voting page, using the Fibonacci sequence as a way to ascertain a task's <strong>complexity</strong>.</p>

        <button @onclick=@(() => JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Navigation.Uri)) class="btn btn-primary">Copy room URL to clipboard</button>

        @if (Voter.IsAdmin)
        {
            <button @onclick="() => VotingService.RevealVotes(Room.Id)" class="btn btn-success">Reveal votes</button>
            <button @onclick="() => VotingService.ResetVotes(Room.Id)" class="btn btn-danger">Reset votes</button>
        }
    </div>

    <div>
        <h3>Participants</h3>
        @if (Voter.Type == VoterType.Participant)
        {
            <p>You have @ClientState.CurrentUser.RemainingVotes/@Room.MaxVotes votes remaining</p>
        }
        <ul>
            @foreach (var voter in ClientState.Room.Voters)
            {
                <li class="text-nowrap">@voter.Name (@voter.Type) @(voter.RemainingVotes == 0 ? "✅" : "❌")</li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter] public required Voter Voter { get; set; }
    [Parameter] public required Room Room { get; set; }

    protected override void OnInitialized()
    {
        VotingService.OnVoteReceived += HandleVoteReceived;
        VotingService.OnRevealVotes += HandleRevealVotes;
        VotingService.OnResetVotes += HandleResetVotes;
    }

    private void HandleVoteReceived(Vote vote)
    {
        InvokeAsync(() =>
        {
            ClientState.Room.Voters.First(v => v.Id == vote.Voter.Id).RemainingVotes -= 1;
            StateHasChanged();
        });
    }

    private void HandleRevealVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.ShowVotes = true;
            StateHasChanged();
        });
    }

    private void HandleResetVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.ShowVotes = false;
            ClientState.Room.VoteItems.ForEach(vi => vi.Voters.Clear());
            ClientState.Room.Voters.ForEach(v => v.RemainingVotes = Room.MaxVotes);
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnVoteReceived -= HandleVoteReceived;
        VotingService.OnRevealVotes -= HandleRevealVotes;
        VotingService.OnResetVotes -= HandleResetVotes;
    }
}
