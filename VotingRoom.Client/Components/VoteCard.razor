@using Microsoft.AspNetCore.SignalR.Client
@using VotingRoom.Client.Services
@using VotingRoom.Common.Enums
@using VotingRoom.Common.Models
@inject NavigationManager Navigation
@inject IVotingService VotingService
@inject ClientStateProvider ClientState
@implements IAsyncDisposable

<MudCard Style="align-items: center;" Outlined="true">
    <MudCardHeader>
        @if (ClientState.Room.ShowVotes)
        {
            <MudBadge Content="@VoteItem.Votes" Color="Color.Error" Class="mx-6 my-4">
                <MudText Align="Align.Center" Style="font-size: 3rem;">@VoteItem.Name</MudText>
            </MudBadge>
        }
        else
        {
            <MudText Align="Align.Center" Style="font-size: 4rem;">@VoteItem.Name</MudText>
        }
    </MudCardHeader>

    <MudCardContent Style="padding-top: 0;">
        <MudButton OnClick="() => CastVote(VoteItem)" Disabled="@(ClientState.CurrentUser.RemainingVotes == 0 || ClientState.CurrentUser.Type == VoterType.Spectator)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CheckBox" Color="Color.Success">Cast vote</MudButton>
        @if (ClientState.Room.ShowVotes)
        {
            <MudDivider />
            <MudList T="string">
                @foreach (var voter in VoteItem.Voters)
                {
                <MudListItem>
                    <MudAvatar Color="Color.Primary">@voter.Name.First()</MudAvatar>
                    @voter.Name
                </MudListItem>
                }
            </MudList>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public VoteItem VoteItem { get; set; }

    protected override void OnInitialized()
    {
        VotingService.OnRevealVotes += HandleRevealVotes;
        VotingService.OnResetVotes += HandleResetVotes;
    }

    async Task CastVote(VoteItem voteItem)
    {
        if (ClientState.CurrentUser.RemainingVotes > 0)
        {
            ClientState.CurrentUser.RemainingVotes--;

            var vote = new Vote
            {
                Choice = voteItem,
                Voter = ClientState.CurrentUser,
                RoomId = ClientState.Room.Id,
            };

            await VotingService.SendVote(vote);
        }
    }

    private void HandleRevealVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.ShowVotes = true;
            StateHasChanged();
        });
    }

    private void HandleResetVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.ShowVotes = false;
            ClientState.Room.VoteItems.ForEach(vi => vi.Voters.Clear());
            ClientState.CurrentUser.RemainingVotes = ClientState.Room.MaxVotes;
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnRevealVotes -= HandleRevealVotes;
        VotingService.OnResetVotes -= HandleResetVotes;
    }
}
