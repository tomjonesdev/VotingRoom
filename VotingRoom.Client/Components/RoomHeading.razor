@using VotingRoom.Client.Services
@using VotingRoom.Common.Enums
@using VotingRoom.Common.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IVotingService VotingService
@inject ClientStateProvider ClientState
@implements IAsyncDisposable

<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudText Typo="Typo.h2" GutterBottom>Story point voting</MudText>
    <MudText GutterBottom>Simple story point voting page, using the Fibonacci sequence as a way to ascertain a task's <strong>complexity</strong>.</MudText>

    <div class="d-flex" style="gap: 1rem">
        <MudButton OnClick="@(() => JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Navigation.Uri))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary">Copy room URL to clipboard</MudButton>

        @if (Voter.IsAdmin)
        {
            <MudButton OnClick="() => VotingService.RevealVotes(Room.Id)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Visibility" Color="Color.Success">Reveal votes</MudButton>
            <MudButton OnClick="() => VotingService.ResetVotes(Room.Id)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Recycling" Color="Color.Error">Reset votes</MudButton>
        }
    </div>
</MudPaper>

@code {
    [Parameter] public required Voter Voter { get; set; }
    [Parameter] public required Room Room { get; set; }

    protected override void OnInitialized()
    {
        VotingService.OnRevealVotes += HandleRevealVotes;
        VotingService.OnResetVotes += HandleResetVotes;
    }

    private void HandleRevealVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.ShowVotes = true;
            StateHasChanged();
        });
    }

    private void HandleResetVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.ShowVotes = false;
            ClientState.Room.VoteItems.ForEach(vi => vi.Voters.Clear());
            ClientState.Room.Voters.ForEach(v => v.RemainingVotes = Room.MaxVotes);
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnRevealVotes -= HandleRevealVotes;
        VotingService.OnResetVotes -= HandleResetVotes;
    }
}
