@page "/{RoomId:guid}"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using VotingRoom.Client.Components
@using VotingRoom.Client.Services
@using VotingRoom.Common.Enums
@using VotingRoom.Common.Models
@inject IVotingService VotingService
@inject ClientStateProvider ClientState
@implements IAsyncDisposable

<PageTitle>Voting Room - @ClientState.Room?.Name</PageTitle>
<MudText Typo="Typo.h1" Align="Align.Center" GutterBottom>@(ClientState.Room?.Name ?? "Voting Room")</MudText>

@if (ClientState.CurrentUser is null)
{
    <MemberJoinForm RoomId="RoomId" />
}
else if (ClientState.Room is not null)
{
    <RoomHeading Voter="ClientState.CurrentUser" Room="ClientState.Room" />

    <div class="d-flex justify-space-between align-start">
        <MudPaper Class="pa-16 ma-2" Elevation="3" Style="flex-grow: 5">
            @if (ClientState.CurrentUser.Type == VoterType.Participant)
            {
                <MudText Align="Align.Center" Style="font-size: 2rem;" GutterBottom>You have @ClientState.CurrentUser.RemainingVotes/@ClientState.Room.MaxVotes votes remaining</MudText>
            }
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 1rem;">
                @foreach (var item in ClientState.Room.VoteItems)
                {
                    <VoteCard VoteItem="item" />
                }
            </div>
        </MudPaper>

        <MudPaper Class="pa-16 ma-2" Elevation="3" Style="flex-grow: 1">
            <MudText Typo="Typo.h5" GutterBottom>Participants</MudText>
            <MudList T="string" Gutters="false">
                @foreach (var voter in ClientState.Room.Voters)
                {
                    <MudListItem>
                        <MudBadge Color="@(voter.RemainingVotes == 0 ? Color.Success : Color.Error)" Overlap="true" Bordered="true">
                            <MudAvatar Color="Color.Primary">
                                @voter.Name.First()
                            </MudAvatar>
                        </MudBadge>
                        <MudText Inline Class="ms-3">@($"{voter.Name} ({voter.Type})")</MudText>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </div>
}

@code {
    [Parameter] public Guid RoomId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await VotingService.Connect();

        // TODO: Retrieve room name for subsequent users when they connect (i.e prior to submitting their name)
        VotingService.OnUserJoined += HandleUserJoined;
        VotingService.OnUpdateCurrentUser += HandleUpdateCurrentUser;
        VotingService.OnVoteReceived += HandleVoteReceived;
        VotingService.OnResetVotes += HandleResetVotes;
    }

    private void HandleUserJoined(Voter newUser)
    {
        InvokeAsync(() =>
        {
            ClientState.Room.Voters.Add(newUser);
            StateHasChanged();
        });
    }

    private void HandleUpdateCurrentUser(
        Room room,
        Voter updatedUser)
    {
        ClientState.Room = room;
        ClientState.CurrentUser = updatedUser;
        StateHasChanged();
    }

    private void HandleVoteReceived(Vote vote)
    {
        InvokeAsync(() =>
        {
            ClientState.Room.VoteItems.First(vi => vi.Id == vote.Choice.Id).Voters.Add(vote.Voter);
            ClientState.Room.Voters.First(v => v.Id == vote.Voter.Id).RemainingVotes -= 1;
            StateHasChanged();
        });
    }

    private void HandleResetVotes()
    {
        InvokeAsync(() =>
        {
            ClientState.Room.Voters.ForEach(v => v.RemainingVotes = ClientState.Room.MaxVotes);
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnUserJoined -= HandleUserJoined;
        VotingService.OnUpdateCurrentUser -= HandleUpdateCurrentUser;
        VotingService.OnVoteReceived -= HandleVoteReceived;
        VotingService.OnResetVotes -= HandleResetVotes;
    }
}
