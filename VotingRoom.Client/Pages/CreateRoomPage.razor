@page "/"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@using VotingRoom.Client.Services
@using VotingRoom.Common.Enums
@using VotingRoom.Common.Models
@inject NavigationManager Navigation
@inject IVotingService VotingService
@inject ClientStateProvider ClientState
@implements IAsyncDisposable

<PageTitle>Voting Room</PageTitle>
<MudText Typo="Typo.h1" Align="Align.Center" GutterBottom>Create a new room</MudText>

<EditForm Model="createRoomRequest" OnValidSubmit="CreateRoom" FormName="CreateRoom">
    <DataAnnotationsValidator />

    <MudTextField @bind-Value="createRoomRequest.RoomName" Label="Room name" Variant="Variant.Text" For="@(() => createRoomRequest.RoomName)"></MudTextField>
    <br />

    <MudNumericField @bind-Value="createRoomRequest.MaxVotes" Label="Max votes per participant" Variant="Variant.Text" Min="0" Max="10" For="@(() => createRoomRequest.MaxVotes)" />
    <br />

    <MudTextField @bind-Value="createRoomRequest.AdminName" Label="Your name" Variant="Variant.Text" For="@(() => createRoomRequest.AdminName)"></MudTextField>
    <br />

    <MudRadioGroup @bind-Value="createRoomRequest.AdminVoterType">
        @foreach (var type in Enum.GetValues<VoterType>())
        {
            <MudRadio Value="type" Color="Color.Primary" Dense="true">Join as a @type</MudRadio>
        }
    </MudRadioGroup>
    <small>(Participants can vote, spectators can't)</small>

    <br />
    <br />

    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Create room</MudButton>
</EditForm>

@code {
    RoomCreateRequest createRoomRequest = new();

    protected async override void OnInitialized()
    {
        await VotingService.Connect();

        VotingService.OnRoomCreated += HandleRoomCreated;
    }

    async Task CreateRoom()
    {
        await VotingService.CreateRoom(createRoomRequest);
    }

    private void HandleRoomCreated(
        Room newRoom,
        Voter initialUser)
    {
        ClientState.Room = newRoom;
        ClientState.CurrentUser = initialUser;
        Navigation.NavigateTo("/" + newRoom.Id);
    }

    public async ValueTask DisposeAsync()
    {
        VotingService.OnRoomCreated -= HandleRoomCreated;
    }
}
